#include "interface_structs.glsl"
#include "../lib/lib/random.glsl"

layout(push_constant) uniform PC {PCGenerateParticles pc;};
layout(binding = LOCAL_BINDING_OFFSET + 0) writeonly buffer PARTICLES { GLSLParticle particles[];};
layout(binding = LOCAL_BINDING_OFFSET + 1) writeonly buffer PREDICTED_POS { vec2 pred_pos[];};
//layout(binding = LOCAL_BINDING_OFFSET + 0) writeonly buffer PARTICLES { vec2 particles[];};



void main()
{
	if(gl_GlobalInvocationID.x >= pc.taskSize)
	{
		return;
	}

	uint id = gl_GlobalInvocationID.x;
	uint seed = pc.taskSize*pc.seed + id + 46732468;

	GLSLParticle elem;
	uint xSize = uint(sqrt(float(pc.taskSize)));
	//vec2 rng = vec2(float(id%xSize)/float(xSize), float(id/xSize));
	vec2 rng = vec2(unormNext(seed), unormNext(seed));
	vec2 scale = vec2(pc.x_range.y - pc.x_range.x, pc.y_range.y - pc.y_range.x);
	scale -= vec2(2.0*pc.radius);
	vec2 offset = vec2(pc.x_range.x, pc.y_range.x);
	offset += vec2(pc.radius);
	elem.pos = rng * scale * 0.5f + scale * 0.25f + offset;
	//elem.pos = rng * scale + offset;
	elem.vel = vec2(0.0);
	particles[id] = elem;
	pred_pos[id] = elem.pos;
}
