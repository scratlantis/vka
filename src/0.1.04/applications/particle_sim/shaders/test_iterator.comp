#include "../lib/lib/kernels.glsl"
#include "../lib/lib/misc.glsl"
#include "interface_structs.glsl"
struct PushStruct
{
	uint taskSize;
	float radius;
	uint structureSize;
	uint structureOffset;
};

layout(push_constant) uniform PC {PushStruct pc;};

//layout(binding = LOCAL_BINDING_OFFSET + 0) readonly buffer PARTICLE_DATA { vecN particles[];};
layout(binding = LOCAL_BINDING_OFFSET + 0) readonly buffer PARTICLE_DATA { GLSLParticle particles[];};
layout(binding = LOCAL_BINDING_OFFSET + 1) writeonly buffer COLORS { vec4 colors[];};


void main()
{
	if(gl_GlobalInvocationID.x >= pc.taskSize)
	{
		return;
	}


	AttributeDescriptor attrDesc;
	//attrDesc.stride = pc.structureSize;
	//attrDesc.offset = pc.structureOffset;

	attrDesc.stride = 16;
	attrDesc.offset = 0;

	attrDesc.alignedSize = 8;

	uint id				= gl_GlobalInvocationID.x;
	uint range			= pc.taskSize;
	uint attrID			= attributeID(id, attrDesc);

	//vecN localPos		= particles[attrID];
	vecN localPos		= particles[id].pos;

	vec3 assignedColor	= vec3(0.0,1.0,0.0);
	bool writeColor = false;

	// local pos -> cell pos ?
	//colors[id] = vec4(1.0,0.0,0.0,1.0);

	//ITERATE_START

		//ivec2 originCell = GetCell2D(localPos, pni_uniform.radius);
		////originCell.xy = ivec2(0,0);
		////uint hash = HashCell2D(originCell + offsets2D[4]);
		//uint hash = HashCell2D(originCell);
		//uint key = KeyFromHash(hash, pni_uniform.range);
		//
		//uint startID = pni_start_id[id];
		//
		//uint lastCellKey = 0xFFFFFFFF;					
		//if(startID != 0xFFFFFFFF)						
		//{																			
		//	for(uint j = 0; j<MAX_PARTICLES_PER_CELL; j++)	
		//	{												
		//		ParticleID pID = getParticleID(startID, j);
		//		if(j!= 0 && pID.cellID != lastCellKey)		
		//		{											
		//			break;									
		//		}											
		//		lastCellKey = pID.cellID;					
		//		if(pID.id != id)							
		//		{
		//// ----------------------
		//
		//if(j==0)
		//{
		//	vecN otherPos = particles[pID.id].pos;
		//	assignedColor.xy = randomND(vec2(63455.0) * vec2(otherPos.x, otherPos.y));
		//}
		////assignedColor.xy = vec2(1.0);
		//colors[pID.id] = vec4(assignedColor, 1.0);


	// ----------------------

	//ITERATE_END
	//}}}


	//for(uint i = 0; i<range; i++)
	//{
	//}
}