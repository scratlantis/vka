#ifndef FORMAT
#define FORMAT rgba32f
#endif

#ifndef BUFFER_TYPE
#define BUFFER_TYPE float
#endif

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;
layout(binding = 0, FORMAT) readonly uniform image2D img;
layout(binding = 1) writeonly buffer OUTPUT{ BUFFER_TYPE buf[]; };

struct PushStruct
{
	uvec2 extentIN;
	uvec2 offsetIN;
	uint offsetOUT;
};

layout(push_constant) uniform PC {PushStruct pc;};

void main()
{
	uvec2 gID = gl_GlobalInvocationID.xy;
	if (gID.x >= pc.extentIN.x || gID.y >= pc.extentIN.y) return;

	uint outputIndex = gID.x + pc.extentIN.x * gID.y + pc.offsetOUT;
	buf[outputIndex] = imageLoad(img, ivec2(gID + pc.offsetIN)).r;
}