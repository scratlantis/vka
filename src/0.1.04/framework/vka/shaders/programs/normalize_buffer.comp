#ifndef REDUCE_VALUE_TYPE
#define BUFFER_TYPE float
#elif(REDUCE_VALUE_TYPE == REDUCE_VALUE_TYPE_FLOAT)
#define BUFFER_TYPE float
#elif(REDUCE_VALUE_TYPE == REDUCE_VALUE_TYPE_UINT32)
#define BUFFER_TYPE uint
#endif
layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;
layout(binding = 0) buffer BUFFER{ BUFFER_TYPE buf[]; };

struct PushStruct
{
	uint offset;
	uint segmentSize;
	uint segmentCount;
};

layout(push_constant) uniform PC {PushStruct pc;};



void main()
{
	uint gID = gl_GlobalInvocationID.x;
	if (gID >= pc.segmentCount) return;

	BUFFER_TYPE sum = 0;
	for (uint i = 0; i < pc.segmentSize; i++)
	{
		uint index = pc.offset + gID * pc.segmentSize + i;
		sum += buf[index];
	}
	BUFFER_TYPE normalizationTerm = BUFFER_TYPE(1.0) / sum;
	for(uint i = 0; i < pc.segmentSize; i++)
	{
		uint index = pc.offset + gID * pc.segmentSize + i;
		buf[index] *= normalizationTerm;
	}
}