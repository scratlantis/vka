#include "grid_hash.glsl"
struct PCCellKey
{
	float radius;
	uint structureSize;
	uint structureOffset;
};
layout(push_constant) uniform PC {PCCellKey pc;};

#ifdef PARTICLE_3D
#define PARTICLE_TYPE vec3
#define PARTICLE_TYPE_ALIGNED_SIZE 16
#else
#define PARTICLE_TYPE vec2
#define PARTICLE_TYPE_ALIGNED_SIZE 8
#endif


layout(binding = LOCAL_BINDING_OFFSET + 0) readonly buffer PARTICLE_DATA { PARTICLE_TYPE particles[];};
layout(binding = LOCAL_BINDING_OFFSET + 1) writeonly buffer CELL_KEYS { uint cellKeys[]; };

uint getParticleIndex(uint id)
{
	return id * pc.structureSize/PARTICLE_TYPE_ALIGNED_SIZE + pc.structureOffset/PARTICLE_TYPE_ALIGNED_SIZE;
}

void main()
{
	if(!validInvocation())
	{
		return;
	}

	uint id = invocationID();
	uint totalCnt = invocationCount().x;
	uint index = getParticleIndex(id);
	PARTICLE_TYPE p = particles[index];
	cellKeys[id] = calcCellKey(p, pc.radius, totalCnt);
}
