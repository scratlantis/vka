#include "grid_hash.glsl"
#include "../../lib/misc.glsl"

struct PCCellKey
{
	uint taskSize;
	float radius;
	uint structureSize;
	uint structureOffset;
};
layout(push_constant) uniform PC {PCCellKey pc;};


layout(binding = LOCAL_BINDING_OFFSET + 0) readonly buffer PARTICLE_DATA { vecN particles[];};
layout(binding = LOCAL_BINDING_OFFSET + 1) writeonly buffer CELL_KEYS { uint cellKeys[]; };


void main()
{
	if(gl_GlobalInvocationID.x >= pc.taskSize)
	{
		return;
	}

	AttributeDescriptor attrDesc;
	attrDesc.stride = pc.structureSize;
	attrDesc.offset = pc.structureOffset;
	attrDesc.alignedSize = ALIGNED_SIZE(vecN);

	uint id = gl_GlobalInvocationID.x;
	uint attrID			= attributeID(id, attrDesc);
	vecN pos = particles[attrID];
	cellKeys[id] = keyFromPosition(pos, pc.radius, pc.taskSize);
}
