
#include "../../lib/kernels.glsl"
#include "../../lib/misc.glsl"
struct PushStruct
{
	float radius;
	uint structureSize;
	uint structureOffset;
	float densityCoef;
};
layout(push_constant) uniform PC {PushStruct pc;};

#ifndef MAX_PARTICLES_PER_CELL
#define MAX_PARTICLES_PER_CELL 32
#endif

layout(binding = LOCAL_BINDING_OFFSET + 0) readonly buffer PARTICLE_DATA { vecN particles[];};
layout(binding = LOCAL_BINDING_OFFSET + 1) writeonly buffer DENSITY { float particle_densities[];};


void main()
{
	if(!validInvocation())
	{
		return;
	}
	float density = 0.0f;


	AttributeDescriptor attrDesc;
	attrDesc.stride = pc.structureSize;
	attrDesc.offset = pc.structureOffset;
	attrDesc.alignedSize = ALIGNED_SIZE(vecN);

	uint id				= invocationID();
	uint range			= invocationCount();
	uint attrID			= attributeID(id, attrDesc);

	vecN localPos		= particles[attrID];
	uint localCellKey	= calcCellKey(localPos, pc.radius, range);

	ITERATE_START
	
	vecN otherPos = particles[attributeID(pID.id, attrDesc)];
	density += KERNEL_WEIGHT(distance(localPos, otherPos), pc.radius);
	
	ITERATE_END

	density += KERNEL_WEIGHT(0, pc.radius);

	density *= KERNEL_NORMALIZATION(pc.radius)*pc.densityCoef * 0.000001;
	particle_densities[id] = density;
}