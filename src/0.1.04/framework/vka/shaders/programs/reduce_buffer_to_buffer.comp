#ifndef FORMAT
#define FORMAT rgba32f
#endif

#ifndef REDUCE_VALUE_TYPE
#define BUFFER_TYPE float
#elif(REDUCE_VALUE_TYPE == REDUCE_VALUE_TYPE_FLOAT)
#define BUFFER_TYPE float
#elif(REDUCE_VALUE_TYPE == REDUCE_VALUE_TYPE_UINT32)
#define BUFFER_TYPE uint
#endif

#ifndef REDUCE_OP
#define REDUCE_OP AVERAGE
#endif

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;
layout(binding = 0) readonly buffer INPUT{ BUFFER_TYPE buf_in[]; };
layout(binding = 1) writeonly buffer OUTPUT{ BUFFER_TYPE buf_out[]; };

struct PushStruct
{
	uint inputSize;
	uint outputSize;
};

layout(push_constant) uniform PC {PushStruct pc;};



void main()
{
	uint gID = gl_GlobalInvocationID.x;
	if (gID >= pc.outputSize) return;
	uint segmentSize = pc.inputSize / pc.outputSize;

	uint inputCount;
	if(gID < pc.inputSize - 1)
	{
		inputCount = segmentSize;
	}
	else
	{
		inputCount = pc.outputSize - segmentSize * (pc.outputSize - 1);
	}

	//#if(REDUCE_OP == AVERAGE)
	float denominator = 1.0/float(inputCount);
	BUFFER_TYPE sum = 0.0;

	for(uint i = 0; i < inputCount; i++)
	{
		BUFFER_TYPE val = buf_in[i + gID * segmentSize];
		sum += val*denominator;
	}

	//if(sum > 100.0)
	//{
	//	sum = 1.0;
	//}
	buf_out[gID] = sum;
	//#endif


}