#ifndef FORMAT
#define FORMAT rgba32f
#endif

#ifndef BUFFER_TYPE
#define BUFFER_TYPE float
#endif

#ifndef REDUCE_OP
#define REDUCE_OP REDUCE_OP_AVERAGE
#endif

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;
layout(binding = 0, FORMAT) readonly uniform image2D img;
layout(binding = 1) writeonly buffer OUTPUT{ BUFFER_TYPE buf[]; };

struct PushStruct
{
	uvec2 extentIN;
	uvec2 offsetIN;
	uint offsetOUT;
};

layout(push_constant) uniform PC {PushStruct pc;};



void main()
{
	uint gID = gl_GlobalInvocationID.x;
	if (gID >= pc.extentIN.y) return;

	uint outputIndex = gID + pc.offsetOUT;

	#if REDUCE_OP == REDUCE_OP_AVERAGE
	float normalizationTerm = 1.0 / float(pc.extentIN.x);
	float sum = 0.0;
	for(uint i = 0; i < pc.extentIN.x; i++)
	{
		float val = imageLoad(img, ivec2(i + pc.offsetIN.x, gID + pc.offsetIN.y)).r;
		sum += val * normalizationTerm;
	}
	buf[outputIndex] = sum;
	#endif
}