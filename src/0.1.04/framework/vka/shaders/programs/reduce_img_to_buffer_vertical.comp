#ifndef FORMAT
#define FORMAT rgba32f
#endif

#ifndef BUFFER_TYPE
#define BUFFER_TYPE float
#endif

#ifndef REDUCE_OP
#define REDUCE_OP REDUCE_OP_AVERAGE
#endif

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;
layout(binding = 0, FORMAT) readonly uniform image2D img;
layout(binding = 1) writeonly buffer OUTPUT{ BUFFER_TYPE buf[]; };

struct PushStruct
{
	uint width;
	uint height;
	uint segmentCount;
};

layout(push_constant) uniform PC {PushStruct pc;};



void main()
{
	uvec2 gID = gl_GlobalInvocationID.xy;
	if (gID.x >= pc.width || gID.y >= pc.segmentCount) return;

	uint outputIndex = gID.x + gID.y * pc.width;
	uint inputCount;

	uint segmentSize = pc.height / pc.segmentCount;
	if(gID.y < pc.segmentCount - 1)
	{
		inputCount = segmentSize;
	}
	else
	{
		inputCount = pc.height - segmentSize * (pc.segmentCount - 1);
	}

	#if(REDUCE_OP == REDUCE_OP_AVERAGE)
	float denominator = 1.0/float(inputCount);
	BUFFER_TYPE sum = 0.0;

	for(uint i = 0; i < inputCount; i++)
	{
		BUFFER_TYPE val = imageLoad(img, ivec2(gID.x, i + gID.y * segmentSize)).r;
		sum += val*denominator;
	}

	buf[outputIndex] = sum;
	#endif


}